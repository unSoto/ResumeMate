import httpx
import asyncio
from typing import List, Dict, Optional
import os
from dotenv import load_dotenv

load_dotenv()

class JobSearchService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""

    def __init__(self):
        self.hh_api_token = os.getenv('HH_API_TOKEN')
        self.base_url = "https://api.hh.ru"

    async def search_jobs_hh(self, skills: List[str], limit: int = 10) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HeadHunter"""
        jobs = []

        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –Ω–∞–≤—ã–∫–æ–≤
        search_query = " ".join(skills[:5])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–∞–≤—ã–∫–æ–≤

        headers = {}
        if self.hh_api_token:
            headers['Authorization'] = f'Bearer {self.hh_api_token}'

        params = {
            'text': search_query,
            'per_page': min(limit, 50),
            'order_by': 'relevance'
        }

        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(
                    f"{self.base_url}/vacancies",
                    params=params,
                    headers=headers
                )
                response.raise_for_status()
                data = response.json()

                for item in data.get('items', []):
                    job = {
                        'id': item['id'],
                        'title': item['name'],
                        'company': item['employer']['name'],
                        'location': item.get('area', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        'remote': '—É–¥–∞–ª–µ–Ω–Ω–æ' in item['name'].lower() or 'remote' in item['name'].lower(),
                        'salary': self._format_salary(item.get('salary')),
                        'url': item['alternate_url'],
                        'requirements': item.get('snippet', {}).get('requirement', ''),
                        'match_score': self._calculate_match_score(skills, item)
                    }
                    jobs.append(job)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ HH: {str(e)}")

        return jobs

    def _format_salary(self, salary_data: Optional[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã"""
        if not salary_data:
            return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        salary_from = salary_data.get('from')
        salary_to = salary_data.get('to')
        currency = salary_data.get('currency', 'RUB')

        if salary_from and salary_to:
            return f"{salary_from:,} - {salary_to:,} {currency}"
        elif salary_from:
            return f"–æ—Ç {salary_from:,} {currency}"
        elif salary_to:
            return f"–¥–æ {salary_to:,} {currency}"

        return "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

    def _calculate_match_score(self, user_skills: List[str], job_data: Dict) -> int:
        """–†–∞—Å—á–µ—Ç match score –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–∞–∫–∞–Ω—Å–∏–µ–π"""
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–µ–º–æ
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã

        job_text = (job_data.get('name', '') + ' ' +
                   job_data.get('snippet', {}).get('requirement', '')).lower()

        matches = 0
        for skill in user_skills:
            if skill.lower() in job_text:
                matches += 1

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º score –æ—Ç 0 –¥–æ 100
        max_possible_matches = min(len(user_skills), 10)  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        score = int((matches / max_possible_matches) * 100) if max_possible_matches > 0 else 0

        return min(score, 100)

    async def get_sample_jobs(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –¥–µ–º–æ"""
        return [
            {
                'id': 'sample_1',
                'title': 'Senior Python Developer',
                'company': 'TechCorp Inc.',
                'location': '–ú–æ—Å–∫–≤–∞',
                'remote': True,
                'salary': '200,000 - 300,000 ‚ÇΩ',
                'url': 'https://example.com/job1',
                'requirements': 'Python, Django, PostgreSQL, –æ–ø—ã—Ç 3+ –ª–µ—Ç',
                'match_score': 95
            },
            {
                'id': 'sample_2',
                'title': 'Full Stack Developer',
                'company': 'Digital Solutions',
                'location': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                'remote': False,
                'salary': '150,000 - 250,000 ‚ÇΩ',
                'url': 'https://example.com/job2',
                'requirements': 'React, Node.js, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å API',
                'match_score': 87
            },
            {
                'id': 'sample_3',
                'title': 'Data Scientist',
                'company': 'Analytics Pro',
                'location': '–ú–æ—Å–∫–≤–∞',
                'remote': False,
                'salary': '180,000 - 280,000 ‚ÇΩ',
                'url': 'https://example.com/job3',
                'requirements': 'Python, SQL, –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è',
                'match_score': 82
            }
        ]

    async def search_jobs(self, skills: List[str], use_real_api: bool = False) -> List[Dict]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π"""
        if use_real_api and self.hh_api_token:
            return await self.search_jobs_hh(skills)
        else:
            return await self.get_sample_jobs()

class CoverLetterGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º"""

    def __init__(self):
        self.openai_api_key = os.getenv('OPENAI_API_KEY')

    async def generate_cover_letter(self, resume_text: str, job_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""

        if self.openai_api_key:
            return await self._generate_with_ai(resume_text, job_data)
        else:
            return self._generate_template(resume_text, job_data)

    def _generate_template(self, resume_text: str, job_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""

        template = f"""
–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏!

–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞–∫–∞–Ω—Å–∏—è {job_data['title']} –≤ –∫–æ–º–ø–∞–Ω–∏–∏ {job_data['company']}.

–ù–∞ –æ—Å–Ω–æ–≤–µ –º–æ–µ–≥–æ –æ–ø—ã—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤, —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –º–æ–≥—É –≤–Ω–µ—Å—Ç–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –≤–∫–ª–∞–¥ –≤ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.
–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏:
‚Ä¢ –ù–∞–≤—ã–∫–∏ –∏–∑ —Ä–µ–∑—é–º–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å

–ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
[–í–∞—à–µ –∏–º—è]
        """

        return template

    async def _generate_with_ai(self, resume_text: str, job_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ —Å –ø–æ–º–æ—â—å—é AI"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —à–∞–±–ª–æ–Ω
        return self._generate_template(resume_text, job_data)

class ResumeAuditService:
    """–°–µ—Ä–≤–∏—Å –∞—É–¥–∏—Ç–∞ —Ä–µ–∑—é–º–µ"""

    def __init__(self):
        self.openai_api_key = os.getenv('OPENAI_API_KEY')

    async def audit_resume(self, resume_text: str, skills: List[str]) -> Dict:
        """–ê—É–¥–∏—Ç —Ä–µ–∑—é–º–µ –∏ –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä—ã–Ω–∫—É"""

        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        score = self._calculate_readiness_score(resume_text, skills)

        recommendations = self._generate_recommendations(resume_text, skills)

        return {
            'overall_score': score,
            'grade': self._get_grade(score),
            'recommendations': recommendations,
            'skills_count': len(skills),
            'text_length': len(resume_text)
        }

    def _calculate_readiness_score(self, resume_text: str, skills: List[str]) -> int:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑—é–º–µ"""
        score = 50  # –ë–∞–∑–æ–≤—ã–π score

        # –î–ª–∏–Ω–∞ —Ä–µ–∑—é–º–µ
        if len(resume_text) > 1000:
            score += 15
        elif len(resume_text) > 500:
            score += 10

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤
        if len(skills) >= 10:
            score += 20
        elif len(skills) >= 5:
            score += 10

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        sections = ['–æ–ø—ã—Ç', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–Ω–∞–≤—ã–∫–∏', '–∫–æ–Ω—Ç–∞–∫—Ç—ã']
        found_sections = sum(1 for section in sections if section in resume_text.lower())
        score += found_sections * 3

        return min(score, 100)

    def _get_grade(self, score: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±—É–∫–≤–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
        if score >= 90:
            return 'A'
        elif score >= 80:
            return 'B'
        elif score >= 70:
            return 'C'
        elif score >= 60:
            return 'D'
        else:
            return 'E'

    def _generate_recommendations(self, resume_text: str, skills: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—é–º–µ"""
        recommendations = []

        if len(resume_text) < 500:
            recommendations.append("üìù –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã")

        if len(skills) < 5:
            recommendations.append("üéØ –£–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤")

        if '–æ–ø—ã—Ç' not in resume_text.lower():
            recommendations.append("üíº –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–∑–¥–µ–ª —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã")

        if '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' not in resume_text.lower():
            recommendations.append("üéì –î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏")

        if '–∫–æ–Ω—Ç–∞–∫—Ç' not in resume_text.lower():
            recommendations.append("üìû –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

        if not recommendations:
            recommendations.append("‚úÖ –†–µ–∑—é–º–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!")

        return recommendations
