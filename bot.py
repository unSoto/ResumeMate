import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import httpx
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()

# URL FastAPI —Å–µ—Ä–≤–µ—Ä–∞
API_BASE_URL = f"http://{os.getenv('FASTAPI_HOST', 'localhost')}:{os.getenv('FASTAPI_PORT', '8000')}"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def send_api_request(endpoint: str, method: str = "GET", data: dict = None, files: dict = None):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API"""
    url = f"{API_BASE_URL}{endpoint}"

    async with httpx.AsyncClient() as client:
        try:
            if method == "GET":
                response = await client.get(url)
            elif method == "POST":
                if files:
                    response = await client.post(url, files=files, data=data)
                else:
                    response = await client.post(url, json=data)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}")

            response.raise_for_status()
            return response.json()

        except httpx.HTTPStatusError as e:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
            return {"error": f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ResumeMate!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üìÑ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –∏ –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏
‚Ä¢ üîç –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
‚Ä¢ üìß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
‚Ä¢ ‚≠ê –û—Ü–µ–Ω–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ä–µ–∑—é–º–µ –∫ —Ä—ã–Ω–∫—É —Ç—Ä—É–¥–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/resume - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—é–º–µ
/search - –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:
    """

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ", callback_data="upload_resume")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data="search_jobs")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

    await message.answer(welcome_text, reply_markup=keyboard)

@dp.message(Command("resume"))
async def cmd_resume(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /resume"""
    user_id = message.from_user.id
    user_data[user_id] = {"awaiting_resume": True}

    await message.answer(
        "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX —Ñ–∞–π–ª —Å –≤–∞—à–∏–º —Ä–µ–∑—é–º–µ.\n"
        "–Ø –∏–∑–≤–ª–µ–∫—É –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –∞–Ω–∞–ª–∏–∑."
    )

@dp.message(Command("search"))
async def cmd_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    await show_job(message, 0)

async def show_job(message: types.Message, job_index: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –≤–∞–∫–∞–Ω—Å–∏—é"""
    try:
        from jobs import JobSearchService

        job_service = JobSearchService()
        jobs = await job_service.get_sample_jobs()

        if job_index >= len(jobs):
            await message.answer("‚ùå –ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç")
            return

        job = jobs[job_index]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        has_next = job_index + 1 < len(jobs)
        has_prev = job_index > 0

        job_text = f"""
üîç –í–∞–∫–∞–Ω—Å–∏—è {job_index + 1} –∏–∑ {len(jobs)}

üè¢ {job['title']}
üè¢ {job['company']}
üìç {job['location']}
üí∞ {job['salary']}
‚≠ê Match: {job['match_score']}%

–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python/Django
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
‚Ä¢ –û–ø—ã—Ç —Å Python 3+ –ª–µ—Ç
‚Ä¢ –ó–Ω–∞–Ω–∏–µ Django/Flask
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_job_{job_index}"),
                InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_job_{job_index}")
            ]
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if has_prev:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"prev_job_{job_index}"))
        if has_next:
            nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data=f"next_job_{job_index}"))

        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ])

        await message.answer(job_text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@dp.callback_query()
async def handle_callbacks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    user_id = callback.from_user.id
    data = callback.data

    if data == "upload_resume":
        user_data[user_id] = {"awaiting_resume": True}
        await callback.message.answer(
            "üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF –∏–ª–∏ DOCX —Ñ–∞–π–ª —Å –≤–∞—à–∏–º —Ä–µ–∑—é–º–µ.\n"
            "–Ø –∏–∑–≤–ª–µ–∫—É –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –∞–Ω–∞–ª–∏–∑."
        )

    elif data == "search_jobs":
        await show_job(callback.message, 0)

    elif data == "help":
        help_text = """
üìã –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/resume - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
/search - –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π

üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:
‚Ä¢ –ê–Ω–∞–ª–∏–∑ PDF/DOCX —Ä–µ–∑—é–º–µ
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
‚Ä¢ –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å match-score
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º
‚Ä¢ –ê—É–¥–∏—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∑—é–º–µ

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @c4soto
        """
        await callback.message.answer(help_text)

    elif data == "main_menu":
        await cmd_start(callback.message)

    elif data.startswith("next_job_"):
        current_index = int(data.split("_")[-1])
        await show_job(callback.message, current_index + 1)

    elif data.startswith("prev_job_"):
        current_index = int(data.split("_")[-1])
        await show_job(callback.message, current_index - 1)

    elif data.startswith("apply_job_"):
        job_index = int(data.split("_")[-1])
        from jobs import JobSearchService
        job_service = JobSearchService()
        jobs = await job_service.get_sample_jobs()
        job = jobs[job_index]

        await callback.message.answer(
            f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n"
            f"üè¢ {job['title']}\n"
            f"üè¢ {job['company']}\n\n"
            "–≠—Ç–æ –¥–µ–º–æ-—Ñ—É–Ω–∫—Ü–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ\n"
            "‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ—Ç–∫–ª–∏–∫–∞\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ API HH.ru –∏–ª–∏ email"
        )

    elif data.startswith("skip_job_"):
        job_index = int(data.split("_")[-1])
        from jobs import JobSearchService
        job_service = JobSearchService()
        jobs = await job_service.get_sample_jobs()
        job = jobs[job_index]

        await callback.message.answer(
            f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞:\n"
            f"üè¢ {job['title']} - {job['company']}\n\n"
            "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é?"
        )

    await callback.answer()

@dp.message()
async def handle_files(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ
    if user_data.get(user_id, {}).get("awaiting_resume"):
        if message.document:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file = message.document

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            if not (file.mime_type in ['application/pdf'] or
                   file.file_name.lower().endswith(('.pdf', '.docx', '.doc'))):
                await message.answer(
                    "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF –∏ DOCX —Ñ–∞–π–ª—ã.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—é–º–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."
                )
                return

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
                file_info = await bot.get_file(file.file_id)
                file_path = file_info.file_path

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
                await bot.download_file(file_path, f"temp_{file.file_id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –Ω–∞—à API
                with open(f"temp_{file.file_id}", 'rb') as f:
                    files = {'file': (file.file_name, f, file.mime_type)}

                    api_response = await send_api_request("/upload-resume", "POST", files=files)

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(f"temp_{file.file_id}"):
                    os.remove(f"temp_{file.file_id}")

                if "error" in api_response:
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ: {api_response['error']}\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    skills = api_response.get('skills', [])
                    resume_id = api_response.get('resume_id')

                    response_text = f"""
‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!

üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ ({len(skills)}):
{', '.join(skills[:10])}

{'...' if len(skills) > 10 else ''}

üîç –ß—Ç–æ –¥–∞–ª—å—à–µ?
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π,
–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –Ω–∞–≤—ã–∫–∞–º.

ID —Ä–µ–∑—é–º–µ: {resume_id}
                    """

                    await message.answer(response_text)

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                    user_data[user_id] = {"resume_id": resume_id}

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )

        else:
            await message.answer(
                "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ (PDF –∏–ª–∏ DOCX).\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /resume –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞."
            )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
